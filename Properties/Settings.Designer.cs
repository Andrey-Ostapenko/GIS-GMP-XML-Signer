//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System.ComponentModel;
using System.Drawing.Design;
using System.IO;
using System.Windows.Forms.Design;

namespace gisgmp_signer.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "15.5.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }

        private string GetDirectoryFullName(object obj)
        {
            return new DirectoryInfo((string)(obj)).FullName;
        }

        /// <summary>
        /// Путь к каталогу, который предназначен для хранения файлов требущих подписания
        /// </summary>
        [Editor(typeof(MyFolderNameEditor), typeof(UITypeEditor))]
        [DisplayName("Каталог подписываемых файлов"), Description("Путь к каталогу, который предназначен для хранения файлов требущих подписания"), Category("Каталоги")]
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string FolderIn {
            get {
                
                return GetDirectoryFullName(this["FolderIn"]);
            }
            set {
                this["FolderIn"] = value;
            }
        }

        /// <summary>
        /// Путь к каталогу, который предназначен для хранения подписанных фалов
        /// </summary>
        [Editor(typeof(MyFolderNameEditor), typeof(UITypeEditor))]
        [DisplayName("Каталог подписанных файлов"), Description("Путь к каталогу, который предназначен для хранения подписанных фалов"), Category("Каталоги")]
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string FolderOut {
            get {
                return GetDirectoryFullName(this["FolderOut"]);
            }
            set {
                this["FolderOut"] = value;
            }
        }

        /// <summary>
        /// Путь к каталогу, в который будут сохраняться логи подписания фалов
        /// </summary>
        [Editor(typeof(MyFolderNameEditor), typeof(UITypeEditor))]
        [DisplayName("Каталог логов"), Description("Путь к каталогу, в который будут сохраняться логи подписания фалов"), Category("Каталоги")]
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string FolderLog {
            get {
                return GetDirectoryFullName(this["FolderLog"]);
            }
            set {
                this["FolderLog"] = value;
            }
        }

        /// <summary>
        /// Путь к каталогу, в который будут сохраняться логи подписания фалов
        /// </summary>
        [Editor(typeof(MyFolderNameEditor), typeof(UITypeEditor))]
        [DisplayName("Каталог ошибочных файлов"), Description("Путь к каталогу, в который будут сохраняться неподписанные фалйы"), Category("Каталоги")]
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string FolderError {
            get {
                return GetDirectoryFullName(this["FolderError"]);
            }
            set {
                this["FolderError"] = value;
            }
        }

        /// <summary>
        /// Серийный номер сертификата для подписания сущностей электронной подписью служебного пользования
        /// </summary>
        [DisplayName("Серийный номер сертификата ЭП-СП"), Description("Серийный номер сертификата для подписания сущностей электронной подписью служебного пользования"), Category("Настройки ЭП")]
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string DSSP {
            get {
                return (string)(this["DSSP"]);
            }
            set {
                this["DSSP"] = value;
            }
        }

        /// <summary>
        /// Серийный номер сертификата для подписания SOAP-пакета электронной подписью органа власти
        /// </summary>
        [DisplayName("Серийный номер сертификата ЭП-ОВ"), Description("Серийный номер сертификата для подписания SOAP-пакета электронной подписью органа власти"), Category("Настройки ЭП")]
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string DSOV {
            get {
                return (string)(this["DSOV"]);
            }
            set {
                this["DSOV"] = value;
            }
        }

        /// <summary>
        /// Для явного задания типа используемого криптопровайдера при подписании пакета
        /// </summary>
        [TypeConverter(typeof(CryptoProvConverter)), DisplayName("Тип криптопровайдера"), Description("Для явного задания типа используемого криптопровайдера при подписании пакета"), Category("Настройки ЭП")]
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string CryptoProv {
            get {
                return (string)(this["CryptoProv"]);
            }
            set {
                this["CryptoProv"] = value;
            }
        }
    }

    public class CryptoProvConverter : StringConverter
    {
        public override bool GetStandardValuesSupported(ITypeDescriptorContext context)
        {
            return true;
        }

        public override StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
        {
            return new StandardValuesCollection(new string[] { "Авто", "VipNet", "CryptoPro" });
        }

        public override bool GetStandardValuesExclusive(ITypeDescriptorContext context)
        {
            return true;
        }
    }

    public class MyFolderNameEditor : FolderNameEditor
    {
        protected override void InitializeDialog(FolderNameEditor.FolderBrowser folderBrowser)
        {
            folderBrowser.Style = FolderBrowserStyles.ShowTextBox | FolderBrowserStyles.BrowseForComputer;
        }
    }
}
